{"version":3,"sources":["utils/const.js","helpers/getIdentifier.js","components/Form.js","components/Table.js","pages/index.js","index.js"],"names":["types","name","values","getIdentifier","code","objLex","codeCad","Ident","Nums","OperM","Oper1","identificador","numero","i","length","char","charAt","match","cadNums","ss","splice","join","inc","map","x","obj","Nombre","Tipo","Token","Palabras","ParentesisIzq","ParentesisDer","LlaveIzq","LlaveDer","corcheteIzq","corcheteDer","OperadoresAri","logicos","comparadores","delimitador","useStyles","makeStyles","theme","title","fontWeight","fontSize","text","paddingLeft","container","paddingTop","display","inputText","width","Form","setData","classes","useState","codigo","setCodigo","Box","justifyContent","alignItems","className","style","TextField","id","label","multiline","rows","defaultValue","onChange","value","target","marginTop","Button","variant","onClick","TableToken","data","TableContainer","component","Paper","sx","maxHeight","Table","minWidth","size","TableHead","backgroundColor","TableRow","TableCell","align","TableBody","border","scope","AnalizadorLexico","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef2ffeee.chunk.js","sourcesContent":["const types = [\n  {\n    name: 'Palabra reservada',\n    values: [\n      'if',\n      'else',\n      'do',\n      'while',\n      'for',\n      'int',\n      'float',\n      'boolean',\n      'char',\n      'String',\n      'function',\n      'class',\n      'var',\n      'let',\n      'const',\n      'return',\n    ],\n  },\n  { name: 'parentesis izquierdo', values: ['('] },\n  { name: 'parentesis derecho', values: [')'] },\n  { name: 'llave izquierda', values: ['{'] },\n  { name: 'llave Derecha', values: ['}'] },\n  { name: 'corchete izquierdo', values: ['['] },\n  { name: 'corchete derecho', values: [']'] },\n  {\n    name: 'operador aritmetico',\n    values: ['+', '-', '*', '/', '^', '++', '--', '+=', '-='],\n  },\n  { name: 'operador logico', values: ['&&', '||', '|', '!'] },\n  {\n    name: 'operador comparador',\n    values: ['<', '>', '<=', '>=', '!=', '==', '='],\n  },\n  { name: 'delimitador de linea', values: [';'] },\n\n  { name: 'Numero', values: [/\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g] },\n];\n\nexport { types };\n","import { types } from \"../utils/const\";\n\nconst getIdentifier = (code) => {\n     let codeCad = [];\n     let objLex = [];\n     let Ident = /[a-zA-Z_]\\w*/g;\n     let Nums = /\\b\\d+(\\.\\d*)?([eE][+-]?\\d+)?\\b/g;\n     let OperM = /(===|!==|[+][+=]|-[-=]|=[=<>]|[<>][=<>]|&&|[|][|])/g;\n     let Oper1 = /([-+*/=()&|;:.,<>{}[\\]])/g; // May be some character is missing?\n     let identificador = \"\";\n     let numero = \"\";\n\n     for (let i = 0; i < code.length; i++) {\n       let char = code.charAt(i);\n   \n       if (char.match(Ident)) {\n         identificador = identificador + char;\n         if (\n           !code.charAt(i + 1).match(Ident) \n         ) {\n           codeCad = [...codeCad, identificador];\n           identificador = \"\";\n         }\n       } else if (char.match(Oper1)) {\n         codeCad = [...codeCad, char];\n       } else if (char.match(Nums)) {\n         numero = numero + char;\n   \n         if (!code.charAt(i + 1).match(Nums)\n         ) {\n           codeCad = [...codeCad, numero];\n           numero = \"\";\n         }\n       }\n     }\n   \n     let cadNums = [];\n   \n     //unificacion de numeros decimales\n     for (let ss = 0; ss < codeCad.length; ss++) {\n       if (codeCad[ss].match(/\\d+/) || codeCad[ss].match(/\\.{1}/)) {\n         if (codeCad[ss].match(/(\\.){1}/) && codeCad[ss + 1] != null) {\n           if (codeCad[ss + 1].match(/\\d+/) && codeCad[ss - 1].match(/\\d+/) && codeCad[ss - 1]!=null) {\n             cadNums = [...cadNums, codeCad[ss - 1], codeCad[ss], codeCad[ss + 1]];\n             codeCad.splice(ss - 1, 3, cadNums.join(\"\"));\n             cadNums = [];\n           }\n         }\n       }\n     }\n   \n     //unificar los operadores multi simbolos\n   \n     let inc = 0;\n     while (inc < codeCad.length) {\n       if (codeCad[inc].match(Oper1) || codeCad[inc].match(OperM)) {\n         if (\n           (codeCad[inc] + codeCad[inc + 1]).match(OperM) &&\n           codeCad[inc + 1] != null\n         ) {\n           codeCad.splice(inc, 2, codeCad[inc] + codeCad[inc + 1]);\n         }\n       }\n       inc++;\n     }\n   \n\n   \n     objLex = codeCad.map((x) => {\n       let obj = {\n         Nombre: x,\n         Tipo: \"\",\n         Token: 0,\n       };\n       //Palabras reservadas o identificadores\n       if (x.match(Ident)) {\n         let Palabras = types[0].values;\n         for (let i = 0; i < Palabras.length; i++) {\n           if (x === Palabras[i]) {\n             obj.Tipo = types[0].name;\n             obj.Token = i + 1;\n           }\n         }\n         if (obj.Tipo === \"\") {\n           obj.Tipo = \"Identificador\";\n           obj.Token = 185;\n         }\n       }\n   \n       if (x.match(Oper1) || x.match(OperM)) {\n         let ParentesisIzq = types[1].values;\n         let ParentesisDer = types[2].values;\n         let LlaveIzq = types[3].values;\n         let LlaveDer = types[4].values;\n         let corcheteIzq = types[5].values;\n         let corcheteDer = types[6].values;\n         let OperadoresAri = types[7].values;\n         let logicos = types[8].values;\n         let comparadores = types[9].values;\n         let delimitador = types[10].values;\n   \n         //Para operadores aritmeticos\n         for (let i = 0; i < OperadoresAri.length; i++) {\n           if (x === OperadoresAri[i]) {\n             obj.Tipo = types[7].name;\n             obj.Token = i + 155;\n           }\n         }\n         //Para parentesis izquierdo\n         for (let i = 0; i < ParentesisIzq.length; i++) {\n           if (x === ParentesisIzq[i]) {\n             obj.Tipo = types[1].name;\n             obj.Token = i + 151;\n           }\n         }\n         //Para parentesis derecho\n         for (let i = 0; i < ParentesisDer.length; i++) {\n           if (x === ParentesisDer[i]) {\n             obj.Tipo = types[2].name;\n             obj.Token = i + 152;\n           }\n         }\n   \n         //Para llave izquierda\n   \n         for (let i = 0; i < LlaveIzq.length; i++) {\n           if (x === LlaveIzq[i]) {\n             obj.Tipo = types[3].name;\n             obj.Token = i + 153;\n           }\n         }\n         //Para llave derecha\n         for (let i = 0; i < LlaveDer.length; i++) {\n           if (x === LlaveDer[i]) {\n             obj.Tipo = types[4].name;\n             obj.Token = i + 154;\n           }\n         }\n         //Para Corchete izquierdo\n         for (let i = 0; i < corcheteIzq.length; i++) {\n           if (x === corcheteIzq[i]) {\n             obj.Tipo = types[5].name;\n             obj.Token = i + 186;\n           }\n         }\n         //Para corchete derecho\n         for (let i = 0; i < corcheteDer.length; i++) {\n           if (x === corcheteDer[i]) {\n             obj.Tipo = types[6].name;\n             obj.Token = i + 187;\n           }\n         }\n         //Para Operadores logicos\n         for (let i = 0; i < logicos.length; i++) {\n           if (x === logicos[i]) {\n             obj.Tipo = types[8].name;\n             obj.Token = i + 166;\n           }\n         }\n         //Para Operadores comparadores\n         for (let i = 0; i < comparadores.length; i++) {\n           if (x === comparadores[i]) {\n             obj.Tipo = types[9].name;\n             obj.Token = i + 172;\n           }\n         }\n         //Para Delimitador\n         for (let i = 0; i < delimitador.length; i++) {\n           if (x === delimitador[i]) {\n             obj.Tipo = types[10].name;\n             obj.Token = i + 183;\n           }\n         }\n       }\n       let numero = types[11].values;\n       if (x.match(Nums)) {\n         //Para Nmeros\n         for (let i = 0; i < numero.length; i++) {\n           if (x.match(numero[i])) {\n             obj.Tipo = types[11].name;\n             obj.Token = i + 188;\n           }\n         }\n       }\n   \n       return obj;\n     });\n     \n     return objLex;\n   };\n   \n   export default getIdentifier;   \n   ","import React, { useState } from 'react';\nimport { Box, TextField, Button } from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nimport getIdentifier from '../helpers/getIdentifier';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 5,\n    display: 'flex',\n  },\n  inputText: {\n    width: 700,\n  },\n}));\n\nconst Form = ({ setData }) => {\n  const classes = useStyles();\n  const [codigo, setCodigo] = useState('');\n\n  return (\n    <>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <h1>ANALIZADOR LÉXICO</h1>\n          <div className={classes.container}>\n            <span className={classes.title}>Autor:</span>\n            <span className={classes.text}>\n              Jose Enmanuel Estrella 2-16-0823\n            </span>\n          </div>\n          <div className={classes.container}>\n            <span className={classes.title}>Lenguaje:</span>\n            <span className={classes.text}>JavaScript</span>\n          </div>\n        </div>\n      </Box>\n      <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n        <div>\n          <div style={{ paddingTop: 100 }}>\n            <TextField\n              id=\"outlined-multiline-static\"\n              className={classes.inputText}\n              label=\"Escribe o pega el código a analizar\"\n              multiline\n              rows={10}\n              defaultValue={codigo}\n              onChange={({ target: { value } }) => setCodigo(value)}\n            />\n          </div>\n          <div style={{ marginTop: 10 }}>\n            <Button\n              variant=\"contained\"\n              onClick={() => setData(getIdentifier(codigo))}\n            >\n              Analizar\n            </Button>\n          </div>\n        </div>\n      </Box>\n    </>\n  );\n};\n\nexport default Form;\n","import React from 'react';\nimport {\n  Box,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n} from '@mui/material';\nimport { makeStyles } from '@mui/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontWeight: 'bold',\n    fontSize: 20,\n  },\n  text: {\n    fontSize: 20,\n    paddingLeft: 5,\n  },\n  container: {\n    paddingTop: 20,\n  },\n  inputText: {\n    width: 700,\n  },\n}));\n\nconst TableToken = ({ data }) => {\n  const classes = useStyles();\n\n  return (\n    <Box\n      display=\"flex\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      className={classes.container}\n    >\n      <div>\n        <TableContainer component={Paper} sx={{ maxHeight: 440 }}>\n          <Table sx={{ minWidth: 800 }} size=\"small\" aria-label=\"a dense table\">\n            <TableHead style={{ backgroundColor: '##AFAEAE' }}>\n              <TableRow>\n                <TableCell>Lexema</TableCell>\n                <TableCell align=\"left\">Token</TableCell>\n                <TableCell align=\"left\">Código</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {data.length\n                ? data.map(({ Nombre, Tipo, Token }, i) => (\n                    <TableRow\n                      key={i}\n                      sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\n                    >\n                      <TableCell component=\"th\" scope=\"row\" align=\"left\">\n                        {Nombre}\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\" align=\"left\">\n                        {Tipo}\n                      </TableCell>\n                      <TableCell component=\"th\" scope=\"row\" align=\"left\">\n                        {Token}\n                      </TableCell>\n                    </TableRow>\n                  ))\n                : null}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    </Box>\n  );\n};\n\nexport default TableToken;\n","import React, { useState } from 'react';\nimport Form from '../components/Form';\nimport TableToken from '../components/Table';\n\nconst AnalizadorLexico = () => {\n  const [data, setData] = useState([]);\n\n  return (\n    <>\n      <Form setData={setData} />\n      <TableToken data={data} />\n    </>\n  );\n};\n\nexport default AnalizadorLexico;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AnalizadorLexico from './pages';\n\nReactDOM.render(<AnalizadorLexico />, document.getElementById('root'));\n"],"sourceRoot":""}